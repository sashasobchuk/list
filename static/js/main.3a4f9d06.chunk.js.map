{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","age","athlete","bronze","country","date","gold","silver","sport","total","year","data","setData","useEffect","a","axios","response","map","item","index","key","console","log","f","cache","React","useRef","CellMeasurerCache","fixedWidth","defaultHeight","style","width","height","rowHeight","current","deferredMassurementCache","rowCount","length","rowRenderer","parent","columnIndex","rowIndex","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2MAiIeA,MAxHf,WAAgB,IAAD,EACWC,mBAAS,CAC3B,CACIC,IAAK,GACLC,QAAS,iBACTC,OAAQ,EACRC,QAAS,gBACTC,KAAM,aACNC,KAAM,EACNC,OAAQ,EACRC,MAAO,WACPC,MAAO,EACPC,KAAM,QAZH,mBACNC,EADM,KACAC,EADA,KAcXC,qBAAU,YAEC,uCAAG,4BAAAC,EAAA,sEACiBC,MAAA,+DADjB,OACAC,EADA,OAENJ,EAAQI,EAASL,KAAKM,KAAI,SAACC,EAAMC,GAC7B,MAAO,CACHC,IAAKD,EACLlB,IAAKiB,EAAKjB,IACVC,QAASgB,EAAKhB,QACdC,OAAQe,EAAKf,OACbC,QAASc,EAAKd,QACdC,KAAMa,EAAKb,KACXC,KAAMY,EAAKZ,KACXC,OAAQW,EAAKX,OACbC,MAAOU,EAAKV,MACZC,MAAOS,EAAKT,MACZC,KAAMQ,EAAKR,UAGnBW,QAAQC,IAAI,KAjBN,2CAAH,qDAmBPC,KACD,IACH,IAAIC,EAAQC,IAAMC,OACd,IAAIC,IAAkB,CAClBC,YAAY,EACZC,cAAe,OAOvB,OACI,8BACI,qBAAKC,MAAO,CAACC,MAAO,QAASC,OAAQ,SAArC,SAII,cAAC,IAAD,UACK,gBAAED,EAAF,EAAEA,MAAOC,EAAT,EAASA,OAAT,OAAsB,cAAC,IAAD,CACnBD,MAAOA,EACPC,OAAQA,EACRC,UAAWT,EAAMU,QAAQD,UACzBE,yBAA0BX,EAAMU,QAChCE,SAAUzB,EAAK0B,OACfC,YAAa,YAAkC,IAAhClB,EAA+B,EAA/BA,IAAKD,EAA0B,EAA1BA,MAAOW,EAAmB,EAAnBA,MAAOS,EAAY,EAAZA,OAE1BrB,EAAOP,EAAKQ,GAChB,OACI,cAAC,IAAD,CACcK,MAAOA,EAAMU,QACbK,OAAQA,EACRC,YAAa,EACbC,SAAUtB,EAJxB,SAKI,qBAAKW,MAAOA,EAAZ,SACI,gCACI,gCAAK,uCAAcZ,EAAKhB,WACxB,gCAAK,sCAAagB,EAAKjB,OACvB,gCAAK,0CAAiBiB,EAAKd,WAC3B,gCAAK,wCAAec,EAAKV,SACzB,gCACI,yCACA,+BACI,+BAAI,gCAAK,wCAAL,IAAqBU,EAAKT,SAA9B,OACA,+BAAI,uCAAJ,UAAyBS,EAAKZ,KAA9B,OACA,+BAAI,yCAAJ,SAA0BY,EAAKX,OAA/B,QACA,+BAAI,yCAAJ,SAA0BW,EAAKf,OAA/B,UAEJ,yCAAYe,EAAKR,KAAjB,OACA,gCApBGU,cC7DpCsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,+BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3a4f9d06.chunk.js","sourcesContent":["// import './App.css';\nimport * as axios from \"axios\";\nimport React, {useEffect, useState} from \"react\";\nimport {List, AutoSizer, CellMeasurer, CellMeasurerCache} from \"react-virtualized\"\nimport faker from 'faker'\n//        return await axios.get(`${hostUrl}concerts/getPage`,{\n//             headers: {Authorization: `Bearer ${localStorage.getItem('token')}`}\n//         })\n\nfunction App() {\n    let [data, setData] = useState([\n        {\n            age: 23,\n            athlete: \"Michael Phelps\",\n            bronze: 0,\n            country: \"United States\",\n            date: \"24/08/2008\",\n            gold: 8,\n            silver: 0,\n            sport: \"Swimming\",\n            total: 8,\n            year: 2008\n        },])\n    useEffect(() => {\n        // debugger\n        const f = async () => {\n            const response = await axios.get(`https://www.ag-grid.com/example-assets/olympic-winners.json`)\n            setData(response.data.map((item, index) => {\n                return {\n                    key: index,\n                    age: item.age,\n                    athlete: item.athlete,\n                    bronze: item.bronze,\n                    country: item.country,\n                    date: item.date,\n                    gold: item.gold,\n                    silver: item.silver,\n                    sport: item.sport,\n                    total: item.total,\n                    year: item.year\n                }\n            }))\n            console.log(111)\n        }\n        f()\n    }, [])\n    let cache = React.useRef(\n        new CellMeasurerCache({\n            fixedWidth: true,\n            defaultHeight: 100,\n        })\n    )\n// console.log(data )\n// console.log('data[0] ', data[70] )\n// console.log('data[0] ', data.length )\n\n    return (\n        <div>\n            <div style={{width: '100vw', height: \"100vh\"}}>\n\n\n\n                <AutoSizer>\n                    {({width, height}) => (<List\n                        width={width}\n                        height={height}\n                        rowHeight={cache.current.rowHeight}\n                        deferredMassurementCache={cache.current}\n                        rowCount={data.length}\n                        rowRenderer={({key, index, style, parent}) => {\n                            debugger\n                            let item = data[index];\n                            return (\n                                <CellMeasurer key={key}\n                                              cache={cache.current}\n                                              parent={parent}\n                                              columnIndex={0}\n                                              rowIndex={index}>\n                                    <div style={style}>\n                                        <div>\n                                            <div><b>name: </b>{item.athlete}</div>\n                                            <div><b>age: </b>{item.age}</div>\n                                            <div><b>country: </b>{item.country}</div>\n                                            <div><b>sport: </b>{item.sport}</div>\n                                            <div>\n                                                <h3> medals</h3>\n                                                <ul>\n                                                    <li><big><b>total: </b> {item.total}</big> </li>\n                                                    <li><b>gold: </b>gold : {item.gold} </li>\n                                                    <li><b>silver: </b>gold :{item.silver}  </li>\n                                                    <li><b>bronze: </b>gold :{item.bronze} </li>\n                                                </ul>\n                                                <div>year: {item.year} </div>\n                                                <hr/>\n                                            </div>\n\n                                        </div>\n\n\n                                    </div>\n                                </CellMeasurer>);\n                        }}\n                    />)}\n                </AutoSizer>\n\n            </div>\n        </div>\n\n        /*      <div>\n                 {data.map((item,index)=>(<div key={index}>\n                  <div><b>name : </b> {item.athlete}</div>\n                  <div><b>age : </b>{item.age}</div>\n                  <div> <b> country : </b>{item.country}</div>\n                  <ul>\n                      <h2>medals</h2>\n                      <li>          <div> total number of medal: {item.total}</div></li>\n                      <li>          <div> number of gold medal: {item.gold}</div>  </li>\n                      <li>          <div> number of silver medal: {item.silver}</div>  </li>\n                      <li>          <div> number of bronze medal: {item.bronze}</div> </li>\n                  </ul>\n\n                  <div> <b>sport   : </b>{item.sport}</div>\n                  <div><b>Year : </b>{item.year}</div>\n                     <hr/>\n              </div>))}\n              </div>*/\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}